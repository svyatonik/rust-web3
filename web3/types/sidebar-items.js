initSidebarItems({"enum":[["Action","Action"],["ActionType","An external action type."],["BlockId","Block Identifier"],["BlockNumber","Block Number"],["CallType","Call type."],["Diff","Serde-friendly `Diff` shadow."],["RecoveryMessage","Recovery message data."],["Res","Response"],["RewardType","Reward type."],["SyncState","The current state of blockchain syncing operations."],["TraceType","Description of the type of trace to make"],["TransactionCondition","Represents condition on minimum block number or block timestamp."],["TransactionId","Transaction Identifier"]],"struct":[["AccountDiff","Serde-friendly `AccountDiff` shadow."],["Block","The block type returned from RPC calls. This is generic over a `TX` type."],["BlockHeader","The block header type returned from RPC calls."],["BlockTrace","Ad-Hoc trace API type"],["Bytes","Raw bytes wrapper"],["Call","Call response"],["CallRequest","Call contract request (eth_call / eth_estimateGas)"],["CallResult","Call Result"],["ChangedType","Aux type for Diff::Changed."],["Create","Create response"],["CreateResult","Craete Result"],["EthProtocolInfo","eth chain version, difficulty, and head of chain which soft fork? Olympic, Frontier, Homestead, Metropolis, Serenity, etc."],["Filter","Filter"],["FilterBuilder","Filter Builder"],["H128",""],["H160","Fixed-size uninterpreted hash type with 20 bytes (160 bits) size."],["H2048","Bloom hash type with 256 bytes (2048 bits) size."],["H256","Fixed-size uninterpreted hash type with 32 bytes (256 bits) size."],["H512","Fixed-size uninterpreted hash type with 64 bytes (512 bits) size."],["H520",""],["H64",""],["Log","A log produced by a transaction."],["MemoryDiff","A diff of some chunk of memory."],["ParityPeerInfo","details of a peer"],["ParityPeerType","Stores active peer count, connected count, max connected peers and a list of peers for parity node"],["PeerNetworkInfo","ip address of both local and remote"],["PeerProtocolsInfo","chain protocol info"],["PipProtocolInfo","pip version, difficulty, and head"],["RawTransaction","Raw bytes of a signed, but not yet sent transaction"],["Recovery","Data for recovering the public address of signed data."],["Reward","Reward action"],["SignedData","Struct representing signed data returned from `Accounts::sign` method."],["SignedTransaction","Data for offline signed transaction"],["StateDiff","Serde-friendly `StateDiff` shadow."],["StorageDiff","A diff of some storage value."],["Suicide","Suicide"],["SyncInfo","Information about current blockchain syncing operations."],["Trace","Trace-Filtering API trace type"],["TraceFilter","Trace filter"],["TraceFilterBuilder","Trace Filter Builder"],["Transaction","Description of a Transaction, pending or in the chain."],["TransactionParameters","Transaction data for signing."],["TransactionReceipt","\"Receipt\" of an executed transaction: details of its execution."],["TransactionRequest","Send Transaction Parameters"],["TransactionTrace","Trace"],["U128","Little-endian large integer type"],["U256","Little-endian large integer type"],["U64","Little-endian large integer type"],["VMExecutedOperation","A record of an executed VM operation."],["VMOperation","A record of the execution of a single VM operation."],["VMTrace","A record of a full VM trace for a CALL/CREATE."],["Work","Miner's work package"]],"type":[["Address","Address"],["Index","Index in block"]]});